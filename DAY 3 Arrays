1)search in a 2d matrix
class Solution {
      public boolean searchMatrix(int[][] matrix, int target) {
            int i = 0, j = matrix[0].length - 1;
            while (i < matrix.length && j >= 0) {
                    if (matrix[i][j] == target) {
                        return true;
                    } else if (matrix[i][j] > target) {
                        j--;
                    } else {
                        i++;
                    }
                }
            
            return false;
        }
}
2)pow(x,n)
class Solution {
    public double myPow(double x, int n) {
        double ans=1.0;
        long nn=n;
        if(nn<0){
            //negative power
            nn= -1 *nn;
        }
        while(nn>0){
            if(nn%2==1){//odd
                ans=ans*x;
                nn=nn-1;
            }
            else{//even
                x=x*x;
                nn=nn/2;
            }
        }
        if(n<0){
            ans=(double)(1.0)/(double)(ans);
        }
        return ans;
    }
}
3)MajorityElement
class Solution {
    public int majorityElement(int[] nums) {
        Arrays.sort(nums);
        int count=1;
        for(int i=0;i<nums.length;i++){
            if(count>(nums.length/2)){
                return nums[i];
            }
            if(nums[i]==nums[i+1]){
                count++;
            }
            else{
                count=1;
            }
        }
        return 0;
    }
}
4)Majority element 2
public List<Integer> majorityElement(int[] nums) {
	List<Integer> result = new ArrayList<Integer>();
	if (nums.length == 0)
		return result;
	// In the begining, both Trump and Biden don't get a vote
	int firstMajor = Integer.MAX_VALUE, firstSum = 0, secondMajor = Integer.MIN_VALUE, secondSum = 0;
	
	for (int i = 0; i < nums.length; i++) {
		// case 1: I want to vote for Biden or Trump
		if (nums[i] == firstMajor)
			firstSum++;
		else if (nums[i] == secondMajor)
			secondSum++;
		// case 2: I want to run for the president
		else if (firstSum == 0) {
			firstMajor = nums[i];
			firstSum = 1;
		}
		else if (secondSum == 0) {
			secondMajor = nums[i];
			secondSum = 1;
		}
		// case 3: fuck sleepy Joe and crazy Trump, let James be the president
		else {
			firstSum--;
			secondSum--;
		}
	}
	// After election, we need to count the vote again.
	firstSum = 0;
	secondSum = 0;
	for (int i = 0; i < nums.length; i++) {
		if (nums[i] == firstMajor)
			firstSum++;    
		else if (nums[i] == secondMajor)
			secondSum++;
	}
	if (firstSum > nums.length / 3)
		result.add(firstMajor);
	if (secondSum > nums.length / 3)
		result.add(secondMajor);
	return result;
}
5)Unique paths
class Solution {
    public int solve(int i,int j,int m,int n,Integer t[][]){
        if(i>=m || i<0 || j<0 || j>=n){
            return 0;
        }
        if(t[i][j]!=null)return t[i][j];
        if(i==m-1 && j==n-1){
            return 1;
        }
        int right=solve(i,j+1,m,n,t);
        int down=solve(i+1,j,m,n,t);
        return t[i][j]=right+down;
    }
    public int uniquePaths(int m, int n) {
        Integer t[][]=new Integer[m][n];
        return solve(0,0,m,n,t);
    }
}
6)Reverse Pairs
class Solution {
        public int reversePairs(int[] nums) {
            int n = nums.length;
            int[] nums_copy = Arrays.copyOf(nums, nums.length);
            Arrays.sort(nums_copy);
            int[] BITS = new int[nums.length + 1];
            int count = 0;
            for (int i = 0; i < n; i++) {
                count += query(BITS, getIndex(nums_copy, 2 * (long)nums[i] + 1) + 1);
                update(BITS, getIndex(nums_copy,nums[i])+1,1);
            }
            return count;
        }

        private void update(int[] BIT, int index, int val) {
            while (index > 0) {
                BIT[index] += val;
                index -= index & (-index);
            }
        }

        private int query(int[] BIT, int index) {
            int sum = 0;
            while (index < BIT.length) {
                sum += BIT[index];
                index += index & (-index);
            }
            return sum;
        }

        private int getIndex(int[] nums_copy, long l) {
            int left = 0;
            int right = nums_copy.length - 1;
            while (left < right) {
                int mid = left + (right - left) / 2;
                if (nums_copy[mid] < l) {
                    left = mid + 1;
                } else {
                    right = mid;
                }
            }
            if(right == nums_copy.length-1 && l>nums_copy[right]) return right+1;
            return right;
        }
    }
