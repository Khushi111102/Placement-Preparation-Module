1.Rotate List

class Solution {
    public int size(ListNode head){
        int count = 0;
        while(head != null){
            count++;
            head = head.next;
        }
        return count;
    }
    public ListNode rotateRight(ListNode head, int k) {
        if(head == null || head.next == null){ return head;}
        int len = size(head);
        k = k % len;
        if(k == 0) return head;
        
        ListNode slow = head , fast = head;
        while(k != 0){
            fast = fast.next;
            k--;
        }
        while(fast.next != null){
            fast = fast.next;
            slow = slow.next;
        }
        
        ListNode nbr = slow.next;
        slow.next = null;
        fast.next = head;
        return nbr;
    }
}
2. Copy List with Random Pointer
class Solution {
    public Node copyRandomList(Node head) {
        Node curr=head;
        while(curr!=null){
            Node nbr=curr.next;
            Node clone=new Node(curr.val);
            curr.next=clone;
            clone.next=nbr;
            curr=nbr;
        }
        curr=head;
        while(curr!=null){
            Node clone=curr.next;
            clone.random=curr.random.next;
            curr=curr.next.next;
        }
        Node dummy=new Node(0);
        Node dptr=dummy;
        curr=head;
        while(curr!=null){
            Node clone=curr.next;
            dptr.next=clone;
            curr.next=curr.next.next;
            dptr=clone;
            curr=curr.next;
        }
        return dummy.next;
    }
}
3.3sum
class Solution {
    
    public static List<List<Integer>> twoSum(int[] nums,int si,int ei,int target){
        int left=si;
        int right=ei;
        List<List<Integer>> res=new ArrayList<>();
        while(left<right)
        {
            int sum=nums[left] +nums[right];
            if(left!=si && nums[left]==nums[left-1])
            {
                left++;
                continue;
            }
            if(sum == target)
            {
                List<Integer> subres = new ArrayList<>();
                subres.add(nums[left]);
                subres.add(nums[right]);
                res.add(subres);
                
                left++;
                right--;
        
            }
            else if(sum>target)
            {
                right--;
            }
            else
            {
                left++;
                
            }
        }
        return res;
    }
    public List<List<Integer>> threeSum(int[] nums) 
    {
        List<List<Integer>> res =new ArrayList<>();
        int target=0;
        int n=nums.length;
        if(n<3) return res;
        Arrays.sort(nums);
        
        for(int i=0;i<=n-3;i++)
        {
            if(i!=0 && nums[i]==nums[i-1]) continue;
            
            int val1=nums[i];
            int targ=target-val1;
            
            List<List<Integer>>  subRes=twoSum(nums,i+1,n-1,targ);
            for(List<Integer> list : subRes)
            {
                list.add(val1);
                res.add(list);
            }
                
                
        }
        
        return res;
    }
}
4.trapping rain water
class Solution {
    public int trap(int[] height) {
        int n=height.length;
        int[] left=new int[n];
        int[] right=new int[n];
        
        left[0]=height[0];
        right[n-1]=height[n-1];
        for(int i=1;i<n;i++)
        {
            left[i]=Math.max(left[i-1],height[i]);
        }
        
        for(int i=n-2;i>=0;i--)
        {
            right[i]=Math.max(right[i+1],height[i]);
        }
        
        int ans=0;
        for(int i=0;i<n;i++)
        {
            ans+=(Math.min(left[i],right[i])-height[i]);
        }
        return ans;
        
    }
}
5. Remove Duplicates from Sorted Array

class Solution {
    public int removeDuplicates(int[] nums) 
    {
        int n=nums.length;
        int j=1;
        for(int i=0;i<n-1;i++)
        {
            
            if(nums[i]!=nums[i+1])
            {
                nums[j]=nums[i+1];
                j++;
                
            }
            
        }
        return j;
    }
}
6.Maximum consecutive ones
class Solution {
    public int findMaxConsecutiveOnes(int[] nums) {
        int count = 0;
        int maximum = 0;
        int n = nums.length;
        for(int i =0;i<n;i++){
            if(nums[i] == 1){
                count += 1;
                maximum = Math.max(maximum,count);
            }
            else{
                count = 0;
            }
        }
        return maximum;   
    }
}
