1) Permutations
class Solution {
    private void permutation(int index,int[] nums,List<List<Integer>> ans){
        if(index==nums.length){
            List<Integer> ds=new ArrayList<>();
            for(int i=0;i<nums.length;i++){
                ds.add(nums[i]);
            }
            ans.add(new ArrayList<>(ds));
            return;
        }
        for(int i=index;i<nums.length;i++){
            swap(i,index,nums);
            permutation(index+1,nums,ans);
            swap(i,index,nums);
        }
    }
    public void swap(int i,int j,int[] nums){
        int t=nums[i];
        nums[i]=nums[j];
        nums[j]=t;
    }

    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> ans=new ArrayList<>();
        permutation(0,nums,ans);
        return ans;
    }
}
2)N queens
class Solution {
    int chessboard;
    char[][] board;
    List<List<String>> result;
    public List<List<String>> solveNQueens(int n) {
        chessboard=n;
        board=new char[n][n];
        result=new ArrayList();
        
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++)
            {
                board[i][j]='.';
            }
        }
        placeQueen(0);
        return result;
    }
    void placeQueen(int i)
    {
        if(i==chessboard)
        {
            result.add( transformBoardToString());
            return;
        }
        for(int j=0;j<chessboard;j++)
        {
            if(Safeplace(i,j))
            {
                board[i][j]='Q';
                placeQueen(i+1);
                board[i][j]='.';
            }
        }
    }
    boolean Safeplace(int i,int j)
    {
        for(int a=0;a<chessboard;a++){
            if(board[i][a]=='Q'){
                return false;
            }
        }
        for(int a=0;a<chessboard;a++){
            if(board[a][j]=='Q'){
                return false;
            }
        }
        for(int a=i,b=j;a>=0 && b>=0;a--,b--){
            if(board[a][b]=='Q'){
                return false;
            }
        }
        for(int a=i,b=j;a<chessboard && b<chessboard;a++,b++){
            if(board[a][b]=='Q'){
                return false;
            }
        }
        for(int a=i,b=j;a>=0 && b<chessboard;a--,b++){
            if(board[a][b]=='Q'){
                return false;
            }
        }
        for(int a=i,b=j;a<chessboard && b>=0;a++,b--){
            if(board[a][b]=='Q'){
                return false;
            }
        }
        return true;
    }
    List<String> transformBoardToString() {
        List<String> currentResult = new ArrayList<>();
        
        for(char[] arr : board) {
            currentResult.add(new String(arr));
        }
        
        return currentResult;
    }
    
}
3)Sudoko solver
public class Solution {
    public void solveSudoku(char[][] board) {
        if(board == null || board.length == 0)
            return;
        solve(board);
    }
    
    public boolean solve(char[][] board){
        for(int i = 0; i < board.length; i++){
            for(int j = 0; j < board[0].length; j++){
                if(board[i][j] == '.'){
                    for(char c = '1'; c <= '9'; c++){//trial. Try 1 through 9
                        if(isValid(board, i, j, c)){
                            board[i][j] = c; //Put c for this cell
                            
                            if(solve(board))
                                return true; //If it's the solution return true
                            else
                                board[i][j] = '.'; //Otherwise go back
                        }
                    }
                    
                    return false;
                }
            }
        }
        return true;
    }
    
    private boolean isValid(char[][] board, int row, int col, char c){
        for(int i = 0; i < 9; i++) {
            if(board[i][col] != '.' && board[i][col] == c) return false; //check row
            if(board[row][i] != '.' && board[row][i] == c) return false; //check column
            if(board[3 * (row / 3) + i / 3][ 3 * (col / 3) + i % 3] != '.' && 
board[3 * (row / 3) + i / 3][3 * (col / 3) + i % 3] == c) return false; //check 3*3 block
        }
        return true;
    }
}
4)M-Coloring Problem

class solve {
    public boolean isSafe(boolean graph[],int fill,int[] color)
    {
        //get connected nodes of current nodes
        for(int i=0;i<graph.length;i++)
        {
            //if consist true means it's adjacent node of current node check it color if it same as 
            //we want to fill in current node return false
            if(graph[i]==true && color[i]==fill)
            return false;
        }
        
        return true;
    }
    public boolean fillColorNodes(int curr,boolean graph[][],int m,int n,int[] color)
    {
        //base condition when you reached n node
        if(curr==n)
        return true;
        
        //try to fill with color with all possibilities
        for(int i=1;i<=m;i++)
        {
            if(isSafe(graph[curr],i,color))
            {
                //fill ith color in curr node
                color[curr] = i;
                
                //move to fill next node if can fill no need to revert fill color back
                if(fillColorNodes(curr+1,graph,m,n,color))
                return true;
                
                //if return back remove prev color filled
                color[curr] = 0;
            }
        }
        
        //if not possible to fill current node with any color just return false
        return false;
    }
    // Function to determine if graph can be coloured with at most M colours
    // such
    // that no two adjacent vertices of graph are coloured with same colour.
    public boolean graphColoring(boolean graph[][], int m, int n) {
        
        //given graph contain true or false if between nodes edge exist contain true else false
        
       //create a color array for n nodes
       int color[] = new int[n];
       Arrays.fill(color,0);
       
       //check possible to color n nodes with at most m color
       if(fillColorNodes(0,graph,m,n,color))
       return true;
       
       return false;
    }
}
5)Rat in maze
 public static ArrayList<String> findPath(int[][] m, int n) {
        // Your code here
        ArrayList<String> list = new ArrayList<>();
        helper(m, 0, 0, n, "", list);
        return list;
    }
    
    public static void helper(int[][] m, int r, int c, int n, String path, ArrayList<String> list){
        if(m[r][c] == 0) return;
        if(r==n-1 && c==n-1){
            list.add(path);
            return;
        }
        
        
        m[r][c] = 0;
        
        if(r < n-1) helper(m, r+1, c, n, path+'D', list);
        if(c < n-1) helper(m, r, c+1, n, path+'R', list);
        if(r > 0) helper(m, r-1, c, n, path+'U', list);
        if(c > 0) helper(m, r, c-1, n, path+'L', list);
    
        m[r][c] = 1;
    }


    
     
        
        
        
        
        
        
      
