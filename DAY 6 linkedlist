1.Intersection of Two Linked Lists

  //TC:O(2N)
 //SPACE:0(1)
public class Solution {
    public ListNode getIntersectionNode(ListNode l1, ListNode l2) {
        if(l1==null || l2==null)return null;
        ListNode a=l1;
        ListNode b=l2;
        while(a!=b){
            a= a==null?l2:a.next;
            b= b==null?l1:b.next;
        }
        return a;
    }
}

2.Linked List Cycle
public class Solution {
    public boolean hasCycle(ListNode head) {
        ListNode slow=head;
        ListNode fast=head;
        while(fast!=null && fast.next!=null){
            slow=slow.next;
            fast=fast.next.next;
            if(slow==fast){
                return true;
            }
        }
        return false;
    }
}
3.Reverse Nodes in k-Group


