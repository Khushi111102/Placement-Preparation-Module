1.Intersection of Two Linked Lists

  //TC:O(2N)
 //SPACE:0(1)
public class Solution {
    public ListNode getIntersectionNode(ListNode l1, ListNode l2) {
        if(l1==null || l2==null)return null;
        ListNode a=l1;
        ListNode b=l2;
        while(a!=b){
            a= a==null?l2:a.next;
            b= b==null?l1:b.next;
        }
        return a;
    }
}

2.Linked List Cycle
public class Solution {
    public boolean hasCycle(ListNode head) {
        ListNode slow=head;
        ListNode fast=head;
        while(fast!=null && fast.next!=null){
            slow=slow.next;
            fast=fast.next.next;
            if(slow==fast){
                return true;
            }
        }
        return false;
    }
}
3.Reverse Nodes in k-Group
TC:O(N)
SC:O(1)
class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        if(head == null || k==1)return head;
        ListNode dummy=new ListNode(0);
        dummy.next=head;
        ListNode curr=dummy,nex=dummy,pre=dummy;
        int count=0;
        while(curr.next!=null){
            curr=curr.next;
            count++;
        }
        while(count>=k){
            curr=pre.next;
            nex=curr.next;
            for(int i=1;i<k;i++){
                curr.next=nex.next;
                nex.next=pre.next;
                pre.next=nex;
                nex=curr.next;
            }
            pre=curr;
            count-=k;
        }
        return dummy.next;

    }
}
4.Palindrome Linked List
TC:O(N)
SC:O(1)
class Solution {
    private ListNode getmid(ListNode head){
        ListNode slow=head,fast=head;
        while(fast!=null && fast.next.next!=null){
            slow=slow.next;
            fast=fast.next.next;
        }
        return slow;

    }
    private ListNode reverse(ListNode head){
        ListNode curr = head;
        ListNode prev = null;
        
        while(curr != null){
            ListNode nbr = curr.next;
            curr.next = prev;
            prev = curr;
            curr = nbr;
        }
        return prev;
    }
    public boolean isPalindrome(ListNode head) {
        if(head == null || head.next == null) return true;
        ListNode mid=getmid(head);
        ListNode head2=reverse(mid.next);
        mid.next=null;//free
        ListNode p1=head;
        ListNode p2=head2;

        while(p2!=null)
        {
            if(p1.val!=p2.val)return false;
            else
            {
                p1=p1.next;
                p2=p2.next;

            }
        }
        return true;
    }
}


5.Linked List Cycle II
TC:O(N)
SC:O(1)
public class Solution {
    public ListNode detectCycle(ListNode head) {
        ListNode slow=head,fast=head;
        boolean hascycle=false;
        while(fast!=null && fast.next!=null)
        {
            fast=fast.next.next;//2step
            slow=slow.next;//1 step
            if(fast == slow){
                hascycle=true;
                break;
            }
        }
        if(!hascycle)return null;
        ListNode curr=head;
        while(curr!=slow){
            curr=curr.next;
            slow=slow.next;
        }
        return slow;
    }
}
6.Flattening a Linked List

class GfG
{
    Node mergetwolist(Node a,Node b){
        Node temp=new Node(0);
        Node res=temp;
        while(a!=null && b!=null){
            if(a.data<b.data){
                temp.bottom=a;
                temp=temp.bottom;
                a=a.bottom;
            }
            else{
                temp.bottom=b;
                temp=temp.bottom;
                b=b.bottom;
            }
        }
        if(a!=null)temp.bottom=a;
        else{
            temp.bottom=b;
        }
        return res.bottom;
        
    }
    Node flatten(Node root)
    {
        if(root==null || root.next==null){
            return root;
        }
        root.next=flatten(root.next);
        root=mergetwolist(root,root.next);
        return root;
    }
}



