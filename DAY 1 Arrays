ARRAYS 1 STRIVER SDE SHEET

1.SET MATRIX ZEROES

Time complexity :0(2*n*m)
space complexity:0(1)

class Solution {
    public void setZeroes(int[][] matrix) {
        //col={0}--> matrix[0][..]//row={0}-->matrix[][0]
        int n=matrix.length;
        int m=matrix[0].length;
        int col0=1;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(matrix[i][j]==0){
                    //mark the ith row
                    matrix[i][0]=0;
                    //mark the jth col
                    if(j!=0){
                        matrix[0][j]=0;
                    }
                    else{
                        col0=0;
                    }
                    
                }
            }
        }
        for(int i=1;i<n;i++){
            for(int j=1;j<m;j++){
                if(matrix[i][j]!=0){
                    //check for col //check for row
                    if(matrix[0][j]==0 || matrix[i][0]==0){
                        matrix[i][j]=0;
                    }                
                }
            }
        }
        if(matrix[0][0]==0){
            for(int j=0;j<m;j++)matrix[0][j]=0;
        }
        if(col0==0){
            for(int i=0;i<n;i++)matrix[i][0]=0;
        }
    }
}

||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

2: PASCAL TRIANGLE

Time complexity :0(n^2)
space complexity:0(n) because of arraylist else it will be --> 0(1)

class Solution {
    public List<Integer> generateRow(int row){
        long ans=1;
        List<Integer> ansRow=new ArrayList<>();
        ansRow.add(1);
        for(int c=1;c<row;c++){
            ans=ans*(row-c);
            ans=ans/c;
            ansRow.add((int)ans);
        }
        return ansRow;
    }
    public List<List<Integer>> generate(int numRows) {
        List<List<Integer>> ans=new ArrayList<>();
        for(int row=1;row<=numRows;row++){
            ans.add(generateRow(row));
        }
        return ans;
    }
}

||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

3 NEXT PERMUTATION

Time complexity :0(3n)
space complexity:0(1)

class Solution {
public void nextPermutation(int[] nums) {
    int index=-1;
    for(int i=nums.length-1 ; i>=1 ; i--){
        if(nums[i]>nums[i-1]){
            index=i-1;
            break;
        }
    }
    if(index == -1){
        reverse(nums , 0);
        return;
    }
    int justGreater = nums[index+1];
    for(int i=index+1 ; i<nums.length ; i++){
        if(nums[i] > nums[index]){
            justGreater = i ;
        }
    }
    swap(nums , index , justGreater);
    reverse(nums , index+1);
    return ;
}
    private void reverse(int[] nums, int start) {
    int i = start, j = nums.length - 1;
    while (i < j) {
        swap(nums, i, j);
        i++;
        j--; 
    }
    }

private void swap(int[] nums, int i, int j) {
    int temp = nums[i];
    nums[i] = nums[j];
    nums[j] = temp;
} 
}
||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

3 MAXIMUM SUBARRAY

class Solution {
    public int maxSubArray(int[] nums) {
        int n=nums.length;
        int sum=0;
        int max=Integer.MIN_VALUE;
        for(int i=0;i<n;i++){
            sum=sum+nums[i];
            max=Math.max(sum,max);
            if(sum<0)sum=0;
        }
        return max;
    }
}

||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

4 SORT COLORS

class Solution {
    public void sortColors(int[] nums) {
        int count0=0,count1=0,count2=0;
        for(int i=0;i<nums.length;i++){
            switch(nums[i]){
                case 0:
                    count0++;
                    break;
                case 1:
                    count1++;
                    break;
                case 2:
                    count2++;
                    break;
            }
        }
        int i=0;
        while(count0>0){
            nums[i]=0;
            i++;
            count0--;
        }
        while(count1>0){
            nums[i]=1;
            i++;
            count1--;
        }
        while(count2>0){
            nums[i]=2;
            i++;
            count2--;
        }
    }
}

||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

5 BUY AND SELL STOCKS 

class Solution {
    public int maxProfit(int[] prices) {
        int lsf=Integer.MAX_VALUE;
        int op=0;
        int pist=0;
        for(int i=0;i<prices.length;i++){
            if(prices[i]<lsf){
                lsf=prices[i];
            }
            pist=prices[i]-lsf;
            if(pist>op){
                op=pist;
            }
        }
        return op;

    }
}
